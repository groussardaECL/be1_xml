<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<?xml-stylesheet type="text/css" href="index.css"?>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="fr" lang="fr">

    <head>
		<meta http-equiv="Content-Type" content="text/xml ; charset=UTF-8"/>
		<link rel='stylesheet' href='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css' />
        <link href="https://fonts.googleapis.com/css?family=Bungee|Roboto" rel="stylesheet"/>
        <title>BE2 - SVG</title>
	</head>

	<body>
        <div class="container">
            <div id="holder-header">
                <div id="header" class="col-xs-12 col-md-12">
                    <div class="row">
                        <div class="col-xs-12 col-md-12">
                            <h1>Scalable Vector Graphics</h1>
                            <p>by DEVAUX Camille &amp; GROUSSARD Arnaud</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
		<div class="main">
			<div class="container">
				<div class="col-xs-12 col-md-8">
					<div class="titre">
                        <h2>Démarche suivie et raisonnement</h2>
                    </div>
					<p>Pour ce BE, nous avons choisir de réaliser le travail 1 - Version Minimale.</p>
					<p>Aucun de nous deux ne maîtrisant assez un langage de programmation pour réaliser en 4h les autres
						travaux proposés, il nous paraissait plus sage de se concentrer essentiellement sur SVG,
						l'objectif même de ce BE.</p>
					<p>Nous avons réalisé deux graphiques avec SVG. Ces graphiques s'inspirent des données de Météo
						France, pour Paris, au 4 Novembre :</p>
					<ol>
						<li>Le premier graphique présente d'un côté les températures annoncées, inscrites dans un
							intervalle d'erreur (T° min, T° max), et de l'autre l'évolution des précipations par
							heure.</li>
						<li>Le deuxième graphique donne une plage de direction et vitesse que prendra le vent au 4
							novembre, et celles prévues au 5 novembre.</li>
					</ol>
                    <div class="titre">
					    <h2>Difficultés rencontrées lors de l'élaboration des graphiques</h2>
                    </div>
                    <p>
                        Avant de commencer à coder nos graphiques SVG, nous nous sommes inspirés d'autres graphiques et
                        les avons dessinés, en essayant de respecter l'échelle, dans un cadre 180*180. Après avoir pris
                        connaissance des différents éléments de base (<i>line, rect, circle, etc.)</i> ainsi que de
                        leurs attributs et options, nous avons commencés à réaliser nos graphiques en parallèle.
                    </p>
					<p>
                        Afin de s'initier à SVG et de réaliser en même le travail demandé, nous avons procédés de façon
                        itérative, en analysant les résultats des ajouts et modifications apportés à notre code.
                    </p>
                    <div class="titre">
                        <h3>Géométrie et dimensions du canevas SVG</h3>
                    </div>
                    <p>
                        Nous avons alors été confrontés à deux problèmes géométriques que nous n'avions pas immédiatement remarqué :
                    </p>
                    <ul>
                        <li>
                            Au fur et à mesure que nous ajoutions des éléments au graphique, nous nous sommes rendus
                            compte que nous avions mal évalué la taille des éléments, et en particulier, la finesse des
                            traits que nous pouvions tracer avec une taille d'image de 180px par 180px. Nous avons alors
                            augmenté la taille de la <i>ViewBox</i>dans un premier temps.<br></br>Lors de la
                            finalisation de nos graphiques, nous avons par la suite augmenté la taille de l'image vers
                            720*720, et utilisé la transformationsuivante pour réadapter la taille de nos éléments :
                            <i>transform="scale(1.5,1.5)"</i>
                        </li>
                        <li>
                            L'origine du graphique se situe dans le coin supérieur gauche de notre graphique. Cette
                            disposition n'était pas naturel pour tracer un graphique contenant des courbes, pour le premier
                            graphique présentant la température et les précipitations, et pour construire la rose des vents
                            pour le second graphique.<br></br>Nous avons changé le système de coordonnées pour la rose des vents
                            grâce à la transformation suivante : <i>transform="translate(360,360)"</i>
                        </li>
                    </ul>
					<div class="titre">
                        <h3>Superposition des éléments</h3>
                    </div>

                    <p>
                        Nous avons aussi remarqué que les éléments du graphique se superposent en fonction de leur place
                        dans le document SVG. Les premiers éléments dans le code se retrouvent dans l'arrière-plan du
                        graphique, alors que les derniers éléments se retrouvent au premier plan du graphique.
                        Ainsi, après avoir ajouté les courbes et aires correspondantes aux données à la fin du code, nos axes
                        se sont retrouvés parfois masqués par les jeux de données. Pour y remédier, il nous a fallu réorganiser
                        notre code pour que les axes se situe vers la fin du code, et qu'ils apparaissent ainsi au premier plan.
                    </p>
                    <div class="titre">
                        <h3>Courbes de Bezier</h3>
                    </div>
                    <p>
                        Nous avons voulu lisser nos courbes, en particulier celle de la température. L'élément <i>path</i>
                        de SVG permet de réaliser des courbes constituées de lignes ou de courbes.<br></br>
                        Les éléments courbes sont des courbes cubique ou quadratiques de Bezier. Cependant nous avons eu des
                        difficultés à lisser notre courbe (comme avec une fonction d'extrapolation sous Excel). <br/>
                        Nous avons fait quelques tests pour essayer de faire coller les courbes de Beziers à la quinzaine de
                        points dont nous disposions, avec peu de succès. Il semblerait que la meilleure solution soit
                        d'extrapoler la courbe lissée sous Excel et d'importer ensuite un nombre plus important de points
                        dans l'élément <i>path</i> et d'y tracer une courbe de Bezier.
                    </p>
				</div>
                <div class="col-xs-12 col-md-4">
                    <div class="div_padding">
                        <div class="titre">
                            <h3>Températures et Précipitations</h3>
                        </div>
                        <object type="image/svg+xml" data="graphique-temp.svg" width="90%"/>
                        <div class="agrandir">
                            <!--L'attribut target n'est pas comptable avec XHTML 1.0 Strict, mais bien pratique-->
                            <a href="graphique-temp.svg" target="_blank" >Agrandir le graphique</a>
                        </div>
                        <div class="titre">
                            <h3>Rose des vents</h3>
                        </div>
                        <object type="image/svg+xml" data="graphique-vent.svg" width="90%"/>
                        <div class="agrandir">
                            <!--L'attribut target n'est pas comptable avec XHTML 1.0 Strict, mais bien pratique-->
                            <a href="graphique-vent.svg" target="_blank" >Agrandir le graphique</a>
                        </div>
                        <p>
                            <i>N.B. La déclaration des polygones du graphique a posé problème dans le sens où nous avons défini
                                notre graphique et son référentiel par des rotations. En revanche, les différents points des
                                polygones se définissent en coordonnées cartésiennes. Nous sommes donc passés par un
                                <a href="Points pour polygone -data- Direction Vent.xlsx">tableur</a>, en appliquant les formules
                                trigonométriques ordinaires pour obtenir ces coordonnées en base cartésienne.</i>
                        </p>
                    </div>
                </div>
                <div class="col-md-12">
                    <h2>Conclusion</h2>
                    <p>SVG est un outil très puissant pour la création d'éléments visuels. Il permet de créer des images, graphiques, schémas sans que le support (et en particulier sa taille) ne soit un facteur limitant, comme c'est souvent le cas en travaillant avec des images pixélisées, qui peuvent perdre en netteté lorsqu'elles ont agrandis. De nombreux logiciels de création graphique sont basés sur SVG, ou permettent l'exportation dans ce format : <i>Adobe Illustrator, draw.io, GIMP, OpenOffice Draw </i>  De plus, la structure même du code de tout graphique SVG autorise la création rapide de graphique et schémas, à partir d'un même template, et avec des données différentes ou des données variables (<i>Météo, Bourse, Data Viz,...</i>).</p>
                </div>
			</div>
		</div>
	</body>
</html>